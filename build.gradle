/*
 * This file was generated by the Gradle 'init' task.
 */

import groovy.text.GStringTemplateEngine

plugins {
    // Apply the groovy plugin to add support for Groovy
    id 'groovy'
    id 'java'
    id 'info.solidsoft.pitest' version '1.4.6'
    id "com.github.ben-manes.versions" version "0.27.0"
    id "org.asciidoctor.convert" version "1.5.3"
}

apply plugin: 'info.solidsoft.pitest'

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
}

dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.5.9'
    testImplementation 'org.codehaus.groovy:groovy-all:2.5.9'
    // Use the awesome Spock testing and specification framework
    testImplementation 'org.spockframework:spock-core:1.3-groovy-2.5'
    testImplementation ("com.athaydes:spock-reports:1.6.3") { transitive = false }
    // for Geb-Spock-Reports
    // https://github.com/AOEpeople/geb-spock-reports
    //testImplementation 'com.aoe:geb-spock-reports:0.2.5'
    // recommended for logging
    testImplementation 'org.slf4j:slf4j-api:2.0.0-alpha1'
    testImplementation 'org.slf4j:slf4j-simple:2.0.0-alpha1'

    asciidoctor 'org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.15'
    asciidoctor 'org.asciidoctor:asciidoctorj-diagram:1.5.8'
}
pitest {
    targetClasses = ['de.*']  //by default "${project.group}.*"
    pitestVersion = '1.4.1' //not needed when a default PIT version should be used
    threads = 4
    outputFormats = ['XML', 'HTML']
    timestampedReports = false
    //testSourceSets
}
asciidoctor {
    sourceDir = file(buildDir.canonicalPath+'/reports')
    logDocuments = true
    requires = ['asciidoctor-diagram']
    attributes  (
            'source-highlighter': 'coderay@',
            'imagesdir': 'images@',
            'toc': 'left@',
            'icons': 'font@'
    )
    sources {
        include 'spock/summary.adoc', 'pitest/report.adoc'
    }
    outputDir = file(buildDir.canonicalPath+'/reports/asciidoc')
}

task pitestAsciiDoc(
        description: 'creates an AsciiDoc report from Pitest-Results',
        group: 'verification',
        dependsOn: ['test', 'pitest']
) {
    doLast {
        def report = new File (buildDir, "reports/pitest/mutations.xml")
        report = new XmlSlurper().parse(report)
        def convertToMap = { nodes ->
            nodes.children().collect { node ->
                node.attributes() +
                        node.children().collectEntries {
                            [it.name(), it.text()]
                        }
            }
        }
        report = convertToMap(report)
        File reportTemplate = new File(projectDir, 'src/test/resources/reportTemplate.gsp')
        GStringTemplateEngine engine = new GStringTemplateEngine()
        def template = engine.createTemplate(reportTemplate).make([report:report])
        new File(buildDir, 'reports/pitest/report.adoc').write(template.toString())
    }
}
group = 'de.dbsystel'
version = '1.0-SNAPSHOT'
description = 'Spock und die Mutanten'
sourceCompatibility = '8'

test.dependsOn 'pitest'
pitestAsciiDoc.dependsOn 'pitest'
test.mustRunAfter 'pitest'

defaultTasks 'pitest', 'test', 'pitestAsciiDoc', 'asciidoctor'